
# === IMPORTAR LIBRERIAS===
import pandas as pd
import os
import glob
import re
import matplotlib.pyplot as plt
import numpy as np
import geopandas as gpd
import mapclassify              # Clasificaci√≥n de color
import seaborn as sns
from sklearn.model_selection import train_test_split
from scipy.stats import chi2_contingency
import streamlit as st
import io
import snowflake.connector
from streamlit_option_menu import option_menu

# === IMPORTAR BASE DE DATOS ===

# === CARGAR BASE DE DATOS ===
ruta_archivo = r"C:\Users\SoyCurie\Desktop\ProyectoBootcamp\datos\df_Total.csv"

# Cargar archivo CSV
df_Total = pd.read_csv(ruta_archivo, encoding="utf-8")

# Mostrar los primeros registros
print(df_Total.head())

# === PREPROCESAMIENTO GLOBAL DE DATOS ===

cols_sumar = ['GRADUADOS', 'ADMITIDOS', 'PRIMER CURSO']

# Agrupar todo el dataset sin los valores a sumar
df_Total_Agrupado = df_Total.groupby(
    [col for col in df_Total.columns if col not in cols_sumar],
    as_index=False
)[cols_sumar].sum()

# Funci√≥n resumen por g√©nero
def resumen_genero(df, etapa):
    resumen = df.groupby(['A√ëO', 'SEXO']).agg({etapa: 'sum'}).reset_index()
    pivot = resumen.pivot(index='A√ëO', columns='SEXO', values=etapa)
    pivot['TOTAL'] = pivot.sum(axis=1)
    pivot['% MUJERES'] = (pivot.get('Femenino', 0) / pivot['TOTAL']) * 100
    return pivot

# Crear res√∫menes globales
resumen_admitidos = resumen_genero(df_Total_Agrupado, 'ADMITIDOS')
resumen_matriculados = resumen_genero(df_Total_Agrupado, 'PRIMER CURSO')
resumen_graduados = resumen_genero(df_Total_Agrupado, 'GRADUADOS')

# Convertir √≠ndice a num√©rico
resumen_admitidos.index = pd.to_numeric(resumen_admitidos.index)
resumen_matriculados.index = pd.to_numeric(resumen_matriculados.index)
resumen_graduados.index = pd.to_numeric(resumen_graduados.index)

# === ESTILOS CSS PERSONALIZADOS CON SIDEBAR EN GRADIENTE ===
st.markdown("""
<style>
body, .stApp {
    background: radial-gradient(circle at left, #063624, #0d0e0e);
    color: white;
}
section[data-testid="stSidebar"] {
    background: radial-gradient(circle at left, #063624, #0d0e0e);
    color: white;
    border-right: 1px solid #1f1f1f;
}

h1, h2, h3 {
    color: #ffffff;
}
div[data-testid="stHorizontalBlock"] > div {
    background-color: #1e1e1e;
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    border: 1px solid #333;
}
.stButton > button {
    background-color: #10b981;
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    font-weight: bold;
    margin-top: 10px;
}
.stButton > button:hover {
    background-color: #0e9b72;
}
[data-testid="stMarkdownContainer"] > p {
    font-size: 1.1rem;
}
</style>
""", unsafe_allow_html=True)

# === SIDEBAR CON MEN√ö DE OPCIONES ===
if "selected_menu" not in st.session_state:
    st.session_state["selected_menu"] = "Inicio"

with st.sidebar:
    selected = option_menu(
        menu_title="Mujeres en TIC",
        options=["Inicio", "Graficos", "Informaci√≥n"],
        icons=["house-fill", "diagram-3-fill", "envelope-fill"],
        menu_icon="menu-button-wide",
        default_index=["Inicio", "Graficos", "Informaci√≥n"].index(st.session_state["selected_menu"]),
        styles={
            "container": {
                "background-color": "#0d0e0e",
                "padding": "5px",
                "border-radius": "0px",
                "border": "none"
            },
            "icon": {
                "color": "white",
                "font-size": "20px"
            },
            "nav-link": {
                "color": "white",
                "font-size": "16px",
                "text-align": "left",
                "--hover-color": "#222222",
            },
            "nav-link-selected": {
                "background-color": "#1dbe82",
                "color": "#0d0e0e",
                "font-weight": "bold",
                "icon-color": "#0d0e0e",
            },
        }
    )

# === CONTENIDO SEG√öN SECCI√ìN ===
if selected == "Inicio":
    st.title("üìä An√°lisis de Participaci√≥n de Mujeres en Carreras TIC en Colombia 2015 - 2023")
    st.markdown("Bienvenido al Dashboard para el an√°lisis de datos usando 24 bases de datos obtenidas del Sistema Nacional de Informaci√≥n de la Educaci√≥n Superior (SNIES) entre los a√±os 2015 y 2023 de estudiantes admitidos, matriculados en primer curso y graduados.")

    with st.container():
        st.markdown("üìåA pesar del crecimiento en la oferta acad√©mica y la demanda de carreras TIC y STEM en Colombia, la representaci√≥n femenina en estos programas sigue siendo baja. Los datos reflejan diferencias significativas desde la inscripci√≥n hasta la graduaci√≥n, con altas tasas de deserci√≥n femenina.")
    
    with st.container():
        st.markdown(""" ‚úÖ Realizado por:
        <ul style='font-weight: bold;'>
            <li>Maria Andrea Jim√©nez</li>
            <li>Santiago Medina</li>
            <li>Valentina Nieves</li>
        </ul>
        """, unsafe_allow_html=True)
        
    # CENTRAR BOT√ìN SIN COLUMNAS


    # Cambiar secci√≥n en sesi√≥n de Streamlit al hacer clic
    if st.button("Ver Graficos", use_container_width=True):
        st.session_state["selected_menu"] = "Graficos"
        st.rerun()




elif selected == "Graficos":
    st.title("Gr√°ficas")

    st.markdown("### üìà Evoluci√≥n de estudiantes TIC por g√©nero")
    options = ["Femenino", "Masculino"]
    selection = st.segmented_control("Selecciona g√©nero a visualizar", options, selection_mode="single")

    if not selection:
        st.warning("Por favor selecciona un g√©nero.")
    else:
        genero = selection
        colores = {
            #"Femenino": "#1dbe82",
            #"Masculino": "#167753",
        }

        # === GRAFICA DE L√çNEAS ===
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(10, 6))

        if genero in resumen_admitidos.columns:
            ax.plot(resumen_admitidos.index, resumen_admitidos[genero], label=f'Admitidos - {genero}', color=colores.get(genero, '#ffffff'))
        if genero in resumen_matriculados.columns:
            ax.plot(resumen_matriculados.index, resumen_matriculados[genero], label=f'Matriculados - {genero}', linestyle='--', color=colores.get(genero,'#167753'))
        if genero in resumen_graduados.columns:
            ax.plot(resumen_graduados.index, resumen_graduados[genero], label=f'Graduados - {genero}', linestyle='-.', color=colores.get(genero,'#1dbe82'))

        ax.set_title('Evoluci√≥n por g√©nero y etapa educativa')
        ax.set_xlabel('A√±o')
        ax.set_ylabel('Cantidad de personas')
        ax.grid(True, linestyle='--', linewidth=0.5, color='lightgray', alpha=0.4)
        ax.legend()
        st.pyplot(fig)

        # === GR√ÅFICAS DE BARRAS INDIVIDUALES POR ETAPA ===
        def graficar_barras_resumen(resumen_df, titulo, color):
            valores = resumen_df.get(genero)
            if valores is not None:
                fig_bar, ax_bar = plt.subplots(figsize=(8, 5))
                ax_bar.bar(valores.index.astype(str), valores.values, color=color)
                ax_bar.set_title(titulo)
                ax_bar.set_xlabel("A√±o")
                ax_bar.set_ylabel("Cantidad")
                ax_bar.grid(axis='y', linestyle='--', linewidth=0.5, color='gray', alpha=0.4)
                st.pyplot(fig_bar)

        
        graficar_barras_resumen(resumen_admitidos, "Admitidos por a√±o", colores.get(genero, '#ffffff'))
        graficar_barras_resumen(resumen_matriculados, "Matriculados (Primer curso) por a√±o", colores.get(genero, '#167753'))
        graficar_barras_resumen(resumen_graduados, "Graduados por a√±o", colores.get(genero, '#1dbe82'))


    ##--------------------------------------------------------------
    # === GRADUADOS TIC POR NIVEL DE FORMACI√ìN Y G√âNERO ===
    st.markdown("### üìà Graduados TIC por nivel de formaci√≥n y g√©nero")

    # Crear df_graduados a partir del total agrupado
    df_graduados = df_Total_Agrupado[df_Total_Agrupado['GRADUADOS'] > 0]

    # Segmentador de a√±os
    opciones_anios = ["2019", "2020", "2021", "2022", "2023"]
    seleccion_anios = st.segmented_control("Selecciona a√±os a visualizar", opciones_anios, selection_mode="multi")

    if not seleccion_anios:
        st.warning("Por favor selecciona al menos un a√±o.")
    else:
        anios_int = list(map(int, seleccion_anios))  # convertir a int
        df_filtrado = df_graduados[df_graduados['A√ëO'].isin(anios_int)]

        # Agrupar por nivel y sexo
        resumen_niveles = df_filtrado.groupby(['NIVEL DE FORMACI√ìN', 'SEXO'])['GRADUADOS'].sum().unstack().fillna(0)

        # Plot con estilo oscuro
        plt.style.use('dark_background')
        fig_niveles, ax_niveles = plt.subplots(figsize=(10, 6))
        resumen_niveles.plot(kind='bar', ax=ax_niveles, color=['#1dbe82', '#167753'])

        ax_niveles.set_title('Graduados TIC por nivel de formaci√≥n y g√©nero', fontsize=14)
        ax_niveles.set_xlabel('Nivel de formaci√≥n', color='white')
        ax_niveles.set_ylabel('N√∫mero de graduados', color='white')
        ax_niveles.tick_params(axis='x', rotation=45, colors='white')
        ax_niveles.tick_params(axis='y', colors='white')
        ax_niveles.legend(title='G√©nero', facecolor='black', edgecolor='white', labelcolor='white')

        plt.tight_layout()
        st.pyplot(fig_niveles)
    

    # === TOP 10 IES CON M√ÅS MUJERES ADMITIDAS EN TIC ===
    st.markdown("###  Top 10 IES con m√°s mujeres admitidas en TIC")

    if not seleccion_anios:
        st.warning("Por favor selecciona al menos un a√±o para visualizar los datos.")
    else:
        df_admitidas = df_Total_Agrupado[
            (df_Total_Agrupado['A√ëO'].isin(anios_int)) & 
            (df_Total_Agrupado['SEXO'] == 'Femenino') &
            (df_Total_Agrupado['ADMITIDOS'] > 0)
        ]

        top_ies = (
            df_admitidas.groupby('INSTITUCI√ìN DE EDUCACI√ìN SUPERIOR (IES)')['ADMITIDOS']
            .sum()
            .sort_values(ascending=False)
            .head(10)
        )

        # Plot horizontal
        plt.style.use('dark_background')
        fig_top, ax_top = plt.subplots(figsize=(9, 5))
        top_ies.plot(kind='barh', ax=ax_top, color='#1dbe82')

        ax_top.set_title(f"Top 10 IES con m√°s mujeres admitidas en TIC ({', '.join(seleccion_anios)})")
        ax_top.set_xlabel("N√∫mero de admitidas", color='white')
        ax_top.set_ylabel("IES", color='white')
        ax_top.tick_params(axis='x', colors='white')
        ax_top.tick_params(axis='y', colors='white')
        ax_top.invert_yaxis()

        plt.tight_layout()
        st.pyplot(fig_top)

    
    # === SEGMENTADOR EXCLUSIVO PARA MAPA ===
    st.markdown("### üó∫Ô∏è Mapa de mujeres en TIC por departamento")
    a√±o_mapa = st.selectbox("Selecciona el a√±o para visualizar en el mapa:", sorted(df_Total['A√ëO'].unique(), reverse=True))

    # === CARGAR GEOJSON LOCAL (aseg√∫rate que la ruta es correcta) ===
    try:
        gdf = gpd.read_file(r"C:\Users\SoyCurie\Desktop\ProyectoBootcamp\datos\colombia.geo.json")
        gdf['DPTO'] = gdf['DPTO'].astype(int)
    except Exception as e:
        st.error(f"Error al cargar el archivo GeoJSON: {e}")

    # === FILTRAR Y PROCESAR DATOS DE df_Total PARA MUJERES TIC EN ESE A√ëO ===
    df_filtrado = df_Total[
        (df_Total['A√ëO'] == a√±o_mapa) &
        (df_Total['SEXO'].str.lower().str.strip() == 'femenino') &
        (df_Total['ID CINE CAMPO AMPLIO'] == 6)
    ]

    # === AGRUPAR POR DEPARTAMENTO ===
    admitidas = df_filtrado.groupby('C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)')['ADMITIDOS'].sum().reset_index()
    matriculadas = df_filtrado.groupby('C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)')['PRIMER CURSO'].sum().reset_index()
    graduadas = df_filtrado.groupby('C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)')['GRADUADOS'].sum().reset_index()

    # === UNIFICAR DATOS EN UN SOLO DF PARA MAPEO ===
    df_mapa = admitidas.merge(matriculadas, on='C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)', how='outer') \
                    .merge(graduadas, on='C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)', how='outer') \
                    .fillna(0)

    df_mapa.rename(columns={
        'C√ìDIGO DEL DEPARTAMENTO (PROGRAMA)': 'DPTO',
        'ADMITIDOS': 'Admitidas',
        'PRIMER CURSO': 'Matriculadas',
        'GRADUADOS': 'Graduadas'
    }, inplace=True)
    df_mapa['DPTO'] = df_mapa['DPTO'].astype(int)

    # === UNIR CON GEODATAFRAME ===
    mapa = gdf.merge(df_mapa, on='DPTO', how='left').fillna(0)

    # === CREAR MAPAS ===
    fig, axes = plt.subplots(1, 3, figsize=(24, 9))

    bins_ad = [12, 55, 163, 386, 530, 20620]
    bins_mat = [10, 49, 129, 292, 428, 16786]
    bins_grad = [2, 14, 52, 121, 166, 3238]

    # Admitidas
    mapa.plot(column='Admitidas', cmap='YlGn', scheme='user_defined',
            classification_kwds={'bins': bins_ad}, legend=True, ax=axes[0], edgecolor='black')
    axes[0].set_title(f'Admitidas en TIC ‚Äì {a√±o_mapa}')
    axes[0].axis('off')

    # Matriculadas
    mapa.plot(column='Matriculadas', cmap='BuGn', scheme='user_defined',
            classification_kwds={'bins': bins_mat}, legend=True, ax=axes[1], edgecolor='black')
    axes[1].set_title(f'Matriculadas 1er curso en TIC ‚Äì {a√±o_mapa}')
    axes[1].axis('off')

    # Graduadas
    mapa.plot(column='Graduadas', cmap='PuBuGn', scheme='user_defined',
            classification_kwds={'bins': bins_grad}, legend=True, ax=axes[2], edgecolor='black')
    axes[2].set_title(f'Graduadas en TIC ‚Äì {a√±o_mapa}')
    axes[2].axis('off')

    plt.tight_layout()
    st.pyplot(fig)
    


    # === Cargar datos ===
    st.markdown("## üìä An√°lisis por Departamento, A√±o y G√©nero")
    departamentos = df_Total['DEPARTAMENTO DE OFERTA DEL PROGRAMA'].dropna().unique()
    anios = df_Total['A√ëO'].dropna().unique()
    generos = df_Total['SEXO'].dropna().unique()

    departamento_sel = st.selectbox("Selecciona un Departamento", sorted(departamentos))
    anios_sel = st.multiselect("Selecciona uno o varios a√±os", sorted(anios), default=[2023])
    generos_sel = st.multiselect("Selecciona g√©neros", sorted(generos), default=['Femenino', 'Masculino'])

    # === Filtrar DataFrame ===
    df_filtrado = df_Total[
        (df_Total['DEPARTAMENTO DE OFERTA DEL PROGRAMA'] == departamento_sel) &
        (df_Total['A√ëO'].isin(anios_sel)) &
        (df_Total['SEXO'].isin(generos_sel))
    ]

    # === Funci√≥n para graficar cada etapa con su propia figura ===
    def graficar_etapa(columna, titulo, color):
        df_etapa = df_filtrado.groupby(['A√ëO', 'SEXO'])[columna].sum().unstack().fillna(0)

        if df_etapa.empty or not df_etapa.select_dtypes(include='number').any().any():
            st.warning(f"‚ö†Ô∏è No hay datos disponibles para: **{titulo}**.")
            return

        fig, ax = plt.subplots(figsize=(10, 5))
        df_etapa.plot(kind='bar', ax=ax, title=titulo, color=color)
        ax.set_xlabel("A√±o")
        ax.set_ylabel("Cantidad")
        ax.set_xticks(range(len(df_etapa)))
        ax.set_xticklabels(df_etapa.index, rotation=0)
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    # === Graficar Admitidos ===
    graficar_etapa('ADMITIDOS', f'Admitidos en TIC en {departamento_sel}', ['#1dbe82', '#167753', 'white', '#09b9d2'])

    # === Graficar Matriculados Primer Curso ===
    graficar_etapa('PRIMER CURSO', f'Matriculados en 1er curso TIC en {departamento_sel}', ['#1dbe82', '#167753', 'white', '#09b9d2'])

    # === Graficar Graduados ===
    graficar_etapa('GRADUADOS', f'Graduados TIC en {departamento_sel}', ['#1dbe82', '#167753', 'white', '#09b9d2'])




elif selected == "Informaci√≥n":

    # Mostrar info del DataFrame
    buffer = io.StringIO()
    df_Total.info(buf=buffer)
    info_text = buffer.getvalue()
    st.subheader("üìÑ Informaci√≥n del DataFrame df_Total")
    st.text(info_text)

    st.markdown("## üìä Prueba Chi¬≤: Asociaci√≥n entre sexo y nivel de formaci√≥n")

    # Filtrar solo Femenino y Masculino
    df_chi = df_Total[df_Total['SEXO'].isin(['Femenino', 'Masculino'])]

    # Crear tabla de contingencia
    tabla = pd.crosstab(df_chi['SEXO'], df_chi['NIVEL DE FORMACI√ìN'])

    # Aplicar prueba chi-cuadrado
    chi2, p, dof, expected = chi2_contingency(tabla)

    # Mostrar resultados
    st.markdown("### üìå Resultados de la prueba Chi¬≤")
    st.write(f"**Estad√≠stico Chi¬≤:** {chi2:.2f}")
    st.write(f"**p-valor:** {p:.4f}")
    st.write(f"**Grados de libertad:** {dof}")

    if p < 0.05:
        st.success("‚úÖ Existe una asociaci√≥n significativa entre el sexo y el nivel de formaci√≥n.")
    else:
        st.info("üîé No se encontr√≥ una asociaci√≥n significativa entre el sexo y el nivel de formaci√≥n.")


    st.markdown("## üìä Chi¬≤: Asociaci√≥n entre sexo e instituci√≥n educativa")

    # Filtrar solo Femenino y Masculino
    df_chi2_ies = df_Total[df_Total['SEXO'].isin(['Femenino', 'Masculino'])]

    # Crear tabla de contingencia: SEXO vs IES
    tabla2 = pd.crosstab(df_chi2_ies['SEXO'], df_chi2_ies['INSTITUCI√ìN DE EDUCACI√ìN SUPERIOR (IES)'])

    # Aplicar prueba chi-cuadrado
    chi2, p, dof, expected = chi2_contingency(tabla2)

    # Mostrar resultados
    st.markdown("### üìå Resultados de la prueba Chi¬≤")
    st.write(f"**Estad√≠stico Chi¬≤:** {chi2:.2f}")
    st.write(f"**p-valor:** {p:.4f}")
    st.write(f"**Grados de libertad:** {dof}")

    if p < 0.05:
        st.success("‚úÖ Existe una asociaci√≥n significativa entre el sexo y la instituci√≥n educativa.")
    else:
        st.info("üîé No se encontr√≥ una asociaci√≥n significativa entre el sexo y la instituci√≥n educativa.")
